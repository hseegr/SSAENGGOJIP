stages:
  - build
  - docker
  - deploy

# Build Stage
build:
  stage: build
  tags:
    - runner  # 이 태그를 가진 러너에서만 실행
  image: gradle:7.6-jdk17  # Gradle 빌드 이미지
  script:
    - cd Backend/ssaeng-go-jip
    - echo "Building the Spring Boot application"
    - chmod +x gradlew  # 실행 권한 부여
    - ./gradlew build -x test  # 테스트 제외하고 빌드
  artifacts:
    paths:
      - Backend/ssaeng-go-jip/build/libs/*.jar  # 빌드된 JAR 파일 저장
  only:
    - backend  # backend 브랜치에서만 실행

# Docker Build & Push Stage
docker_build_push:
  stage: docker
  tags:
    - runner
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: ""    
  before_script:
    - echo "Logging into Docker Hub"
    - echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin
  script:
    - cd Backend/ssaeng-go-jip
    - echo "Building Docker image"
    - docker build -t ${DOCKER_USERNAME}/${DOCKER_BACKEND_IMAGE_NAME} .
    - echo "Pushing Docker image to Docker Hub"
    - docker push ${DOCKER_USERNAME}/${DOCKER_BACKEND_IMAGE_NAME}
  after_script:
    - docker logout
  only:
    - backend

# Deploy Stage
deploy:
  stage: deploy
  tags:
    - runner  # 이 태그를 가진 러너에서만 실행
  before_script:
    - apt-get update && apt-get install -y openssh-client
  script:
    - echo "Deploying to the server"
    - mkdir -p ~/.ssh
    - echo "${SSH_PRIVATE_KEY}" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-agent bash -c "ssh-add ~/.ssh/id_rsa && ssh -o StrictHostKeyChecking=no ${SSH_USER}@${SSH_HOST} 'sudo docker pull ${DOCKER_USERNAME}/${DOCKER_BACKEND_IMAGE_NAME} && sudo docker stop my-backend-container || true && sudo docker rm my-backend-container || true && sudo docker run -d --name my-backend-container -p 8080:8080 -e POSTGRESQL_URL=${POSTGRESQL_URL} -e POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME} -e POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD} ${DOCKER_USERNAME}/${DOCKER_BACKEND_IMAGE_NAME} && sudo docker image prune -f'"
  only:
    - backend
